// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BomClient is the client API for Bom service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BomClient interface {
	CreateBom(ctx context.Context, in *CreateBomRequest, opts ...grpc.CallOption) (*CreateBomReply, error)
}

type bomClient struct {
	cc grpc.ClientConnInterface
}

func NewBomClient(cc grpc.ClientConnInterface) BomClient {
	return &bomClient{cc}
}

func (c *bomClient) CreateBom(ctx context.Context, in *CreateBomRequest, opts ...grpc.CallOption) (*CreateBomReply, error) {
	out := new(CreateBomReply)
	err := c.cc.Invoke(ctx, "/toy.bom.v1.Bom/CreateBom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BomServer is the server API for Bom service.
// All implementations must embed UnimplementedBomServer
// for forward compatibility
type BomServer interface {
	CreateBom(context.Context, *CreateBomRequest) (*CreateBomReply, error)
	mustEmbedUnimplementedBomServer()
}

// UnimplementedBomServer must be embedded to have forward compatible implementations.
type UnimplementedBomServer struct {
}

func (UnimplementedBomServer) CreateBom(context.Context, *CreateBomRequest) (*CreateBomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBom not implemented")
}
func (UnimplementedBomServer) mustEmbedUnimplementedBomServer() {}

// UnsafeBomServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BomServer will
// result in compilation errors.
type UnsafeBomServer interface {
	mustEmbedUnimplementedBomServer()
}

func RegisterBomServer(s grpc.ServiceRegistrar, srv BomServer) {
	s.RegisterService(&_Bom_serviceDesc, srv)
}

func _Bom_CreateBom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BomServer).CreateBom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toy.bom.v1.Bom/CreateBom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BomServer).CreateBom(ctx, req.(*CreateBomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bom_serviceDesc = grpc.ServiceDesc{
	ServiceName: "toy.bom.v1.Bom",
	HandlerType: (*BomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBom",
			Handler:    _Bom_CreateBom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bom.proto",
}
